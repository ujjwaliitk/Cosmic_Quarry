{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "917e2772",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c0cdaad3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Array: [13  1 28 20 72 35 91 77 76 67]\n",
      "Mean: 48.0\n",
      "Standard Deviation: 30.328204694640267\n"
     ]
    }
   ],
   "source": [
    "# 1. Create a NumPy array of 10 numbers and calculate mean and std deviation\n",
    "arr = np.random.randint(1, 100, size=10)\n",
    "print(\"Array:\", arr)\n",
    "print(\"Mean:\", np.mean(arr))\n",
    "print(\"Standard Deviation:\", np.std(arr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fe4e9db1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "DataFrame:\n",
      "       Name  Age  Marks\n",
      "0    Alice   21     85\n",
      "1      Bob   22     92\n",
      "2  Charlie   23     88\n",
      "3    aryan   24     95\n",
      "4   aviral   25     67\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# 2. Create a simple CSV-style DataFrame manually and treat it like a CSV file\n",
    "data = {\n",
    "    'Name': ['Alice', 'Bob', 'Charlie', 'aryan', 'aviral'],\n",
    "    'Age': [21, 22, 23, 24, 25],\n",
    "    'Marks': [85, 92, 88, 95, 67]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "print(\"\\nDataFrame:\\n\", df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea788316",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3. Plot a histogram of the 'Marks' column using Matplotlib\n",
    "plt.hist(df['Marks'], bins=5, color='skyblue', edgecolor='black')\n",
    "plt.title('Histogram of Marks')\n",
    "plt.xlabel('Marks')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "09769a1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Students with Marks > 90:\n",
      "     Name  Age  Marks\n",
      "1    Bob   22     92\n",
      "3  David   24     95\n"
     ]
    }
   ],
   "source": [
    "# 4. Filter the DataFrame for rows with Marks > 90\n",
    "high_scorers = df[df['Marks'] > 90]\n",
    "print(\"\\nStudents with Marks > 90:\\n\", high_scorers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "96afece3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# 5. Use a scatter plot to visualize relationship between Age and Marks\n",
    "plt.scatter(df['Age'], df['Marks'], color='green')\n",
    "plt.title('Age vs Marks')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Marks')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88e57e08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   StudentID  Age  Marks\n",
      "0       S001   18   81.0\n",
      "1       S002   19   93.9\n",
      "2       S003   17   99.7\n",
      "3       S004   19   83.8\n",
      "4       S005   19  100.0\n",
      "..       ...  ...    ...\n",
      "95      S096   17   86.2\n",
      "96      S097   19  100.0\n",
      "97      S098   16   81.5\n",
      "98      S099   16   74.0\n",
      "99      S100   15   66.5\n",
      "\n",
      "[100 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "# 6. Read an Excel file using pd.read_excel \n",
    "\n",
    "# Read the CSV file\n",
    "df_csv = pd.read_csv(\"student_age_marks.csv\")\n",
    "\n",
    "# Convert and save it as an Excel file\n",
    "df_csv.to_excel(\"student_age_marks.xlsx\", index=False)\n",
    "\n",
    "# Read the Excel file using pd.read_excel\n",
    "df_excel = pd.read_excel(\"student_age_marks.xlsx\", engine='openpyxl')\n",
    "print(df_excel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6d253418",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Merged DataFrame:\n",
      "       Name  Age  Marks     City\n",
      "0    Alice   21     85    Delhi\n",
      "1      Bob   22     92   Mumbai\n",
      "2  Charlie   23     88  Chennai\n",
      "3    aryan   24     95  Kolkata\n",
      "4   aviral   25     67     Pune\n"
     ]
    }
   ],
   "source": [
    "# 7. Merge two DataFrames on a common column\n",
    "df2 = pd.DataFrame({\n",
    "    'Name': ['Alice', 'Bob', 'Charlie', 'aryan', 'aviral'],\n",
    "    'City': ['Delhi', 'Mumbai', 'Chennai', 'Kolkata', 'Pune']\n",
    "})\n",
    "merged_df = pd.merge(df, df2, on='Name', how='left')\n",
    "print(\"\\nMerged DataFrame:\\n\", merged_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f4c6e6f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Missing Values Handled:\n",
      "       Name  Age  Marks     City\n",
      "0    Alice   21     85    Delhi\n",
      "1      Bob   22     92   Mumbai\n",
      "2  Charlie   23     88  Chennai\n",
      "3    aryan   24     95  Kolkata\n",
      "4   aviral   25     67     Pune\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\LENOVO\\AppData\\Local\\Temp\\ipykernel_2692\\1032719752.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  merged_df['City'].fillna('Unknown', inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# 8. Handle missing values \n",
    "merged_df['City'].fillna('Unknown', inplace=True)\n",
    "print(\"\\nMissing Values Handled:\\n\", merged_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6525d9af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Grayscale Image Pixel Values:\n",
      " [[229  54  21 213 174]\n",
      " [181 250 129  70 248]\n",
      " [ 31   2 150 234  78]\n",
      " [ 13 206 237 141 247]\n",
      " [111 116  77 223  77]]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfsAAAGzCAYAAAAogL7TAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjMsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvZiW1igAAAAlwSFlzAAAPYQAAD2EBqD+naQAANoxJREFUeJzt3Ql4VPW5x/GXLWFN2GSTsCgqOyibAWRHBIpsVxQRwnJRWqACopBWARGJoFWsstUK2KciKBVEWkBkLRZkE8pSUShKLEtEhRCUsM193v91pjOTAGFykvnnzPfzPMcwZ2bOnJmM+Z33v5yTz+PxeAQAALhW/nDvAAAAyFmEPQAALkfYAwDgcoQ9AAAuR9gDAOByhD0AAC5H2AMA4HKEPQAALkfYAwDgcoR9HlatWjUZOHBgWF570qRJki9fPrHJV199ZfZpwYIF4d6VPMXG3yUAZxH2Ftq7d6/8z//8j1StWlUKFy4sN998s3Ts2FFee+01cYNZs2ZZEcgpKSkyfvx4qVevnhQvXtx81jVq1JBBgwbJ5s2bw717eZb+bvXgYceOHeHeFQA/K+j9B+zwj3/8Q9q2bStVqlSRoUOHSoUKFSQ5OVm2bt0qr776qowcOdL32IMHD0r+/PnzZNiXLVs2bK0Satu2bdK1a1c5e/asPPTQQzJs2DCJjo6WI0eOyLJly0xgbdy4UVq1ahW2fQQApxD2lnn++eclNjZWtm/fLiVLlsxQifrTcMKN++GHH6RHjx5SsGBB2b17t9SsWTPg/ilTpsiiRYukSJEi19zOuXPnpFixYjm8twCQfXmvLHS5w4cPS506dTIEvSpXrtw1++y9zafaBP3rX/9abrrpJrOdxx57TC5cuCCnT5+WAQMGSKlSpczy1FNPif9FDzds2GCerz9D6QufP3++tGvXzuynHojUrl1bZs+enWGf9+/fb6pm3aYubdq08d2v+zhq1CiJi4sz29Bm9WnTpsmVK1cCtqOP0/euB0b6HhMSEsy6rJgzZ44cP35cZsyYkSHole5T3759pUmTJhn6tQ8cOCAPP/yw+fxatmxp7vvnP/9p9uWWW24xXQHaGjN48GD57rvvfM9fv369ef7SpUszvN7ChQvNfVu2bDG3T5w4YboSKleubD6DihUrSvfu3c3vwd/KlSuldevWUqJECYmJiTH7q9vy+vvf/y4PPPCAaSXS7ehnOnr0aPnpp5+y9Dn9+c9/lkaNGpmDntKlS5sWEG1lCoV+PtpVcvToUfnFL35h/q3dUzNnzvR1Xel3Rw+etPvK/32o77//XsaOHevrctH327lzZ9mzZ0+G1/r666/l/vvvN9vS76K+59WrV2f63f7000/lvvvuM9+jokWLms/zk08+Cek9AjajsreM/qHTP/r79u2TunXrhrQNberXwHn22WdN8/8f/vAHE4jaRaB/+KdOnSp/+9vf5MUXXzSvoQcATtBg1wMV/UOrVfOHH34ov/rVr0xQDx8+3DxGA1b3T/9g//a3vzXrypcvb37++OOP5o/tf/7zH3OAovuq+5yYmOgLZ6UHKBp+elCjze+1atUyIaqBnxW6XxpgvXr1uuH3qOF52223mc/Qe6C0Zs0a+fe//20CWj93PZjRz1x/6ufvPaDRsH377belZ8+eAdvUdbfeeqvEx8eb27179zbP1c9JD460RUdfQ4NSbys98NIDCv289fPR3+9nn30mq1atMgcj6r333jOf6S9/+UspU6aM6brQcR/ffPONue96LUzPPPOM9OnTR/73f/9Xvv32W/Nc7dbQ18nsYPR6Ll++bAJatzF9+nTzvkeMGGFCWb8L/fr1M78TPRjT76R+HtWrVzfP1c9Xu1f089d1J0+elLlz55rvix6AVapUydfaogcN+n15/PHHze9DDxz0YCvYunXrzP7oAc3EiRNNl5j3gFUPlJo2bXrD7xGwll7PHvb46KOPPAUKFDBLfHy856mnnvKsXr3ac+HChQyPrVq1qichIcF3e/78+Zo+nk6dOnmuXLniW6/byZcvn2fYsGG+dZcuXfJUrlzZ07p1a9+69evXm+frT39Hjhwx63X7XhMnTjTr/P34448Z9lH35ZZbbglYV6dOnYDX9Xruuec8xYoV83zxxRcB68ePH28+j6NHj5rby5YtM689ffr0gPdzzz33ZNjPzJQqVcrTsGHDDOtTU1M93377rW9JS0vL8H779u2b4XmZve933nnHPH7Tpk2+dYmJiZ7o6GjP6dOnfetSUlI8BQsWNNtXP/zwg3neiy++eNX91+eXKFHC06xZM89PP/0UcJ//7z2z/UpKSjLfha+//jrDe/P66quvzOf9/PPPBzx37969Zl+D1wfzfg+3b9/uW6ffU103depU3zp9r0WKFDH7s2jRIt/6zz//3DzW+5mo8+fPey5fvpzhe6mf5+TJk33rfve735nn6nfESz+jmjVrBny39XO67bbbMvy/op9Z9erVPR07drzmewTyGprxLaOj7rWy1+pYmyi1AurUqZNp8ly+fHmWtjFkyJCAqVTNmjUzVaiu9ypQoIA0btzYVExO8e/jPnPmjJw6dcpUXvoaevt6tNq85557TBO5Pte7dOjQwVSFmzZtMo/TVgltOdCK1f/9+A9evJbU1FTTshCsf//+puvDu4wbNy7DY7Ql4Vrv+/z582af7777bnN7165dvvu0Wk1PT5clS5b41i1evFguXbokjzzyiG9bUVFRprlZxxZkRqt8HVioMwm028Cf/+/df7+04tX9at68ufkuaHV+Ne+//75pjdGq3v/3oFWytmpkViVnlbYSeGnrwB133GEqe30tL12n9/l/N7UbwjsYVb8L2kWiv0N9rP9nrC0b+v+K/v/jpZ+RDnb1p2M1vvzyS9MKotvyvkf9nNq3b2++a8FdR0BeRjO+hbTvVf/gaj+7Br42Ub/yyitmOp7+kdK+8GvR5m9/2h+ptBk5eP3VAiUU2tepzaF6sKLNx/407L37cTX6x1f7vzVoM+MdoKh9stqPHRzY+oc/K7SPOy0tLcP6yZMnm2Zl70FXZrzNysH9ydplooP6ggdR+h/k6PgA/d1q87X3wEv/rQcGOjbBG2o6RuGJJ54w3Rt6n/Zx64GChq13XIe6XjePNvtPmDDBHCQG/56vdfClvwc9INBgz0yhQoUkFBq6wb9b/U7o2ITgef7B300NXp2NojM5dMaEBr6XdlF46XdDu0SCt+f9fP3fo7pW149+RnrgCbgBYW8xrfA0HHS5/fbbTZ+wVr8aqNeiVW5W1/sP0LvaiVX8/7BejQaQVkQaaC+//LI5sND91ypcD1SyUiXpYzRkdeBgZvQzcILuox5EXbx4MSC46tevf93nZjZCX6tSHVvw5JNPSsOGDc1BiL4XHfgV/L41tLUvWfvNtcrXPv3XX3894DE6QLFbt26mj1oHlmnfeVJSkuljvvPOO7P0HvV3pp+lHohoC4W+Z62gdTyEDpa71u9D79Pvgg4AzOw7k1mrSFbcyPcy+LupYyT0c9BxCs8995wZMKiVvn5WoVTg3ufouBX9nWUm1PcJ2IiwzyO0yV3pwKOc4q1igke1a7WUlUFvGl5aRfq3LGTW5Hu1gwqtyLTi1mb76w1iXLt2rXms/x9kPe9AVmilrCGrLSb+zceh0OpT90Ure62igyvHYDqifcyYMfLOO++YUfF6sPHggw9m+lloda+LbksD6Xe/+50ZIa/3KR3EGVyxeuno9i+++ELeeuutgAGY2gVwPbp9DVptxXDqACu7tOtDzz/x5ptvBqzX76qes8H/u6ED9nT//b9nhw4dCnie9zPUUf3X+74BbkCfvWU0HP0rGi+tkG+kqToU+odSqyxv37iXNp1ej7c68993bQbV0c3BtMLMbJqcBq92AWg1G0wfr33bqkuXLubf/tP6tJLN6hkGta9fm8h1SpYGYrDMPv8bed/KO3MgmAaTjgDX0NYmfK3+/cNKuz+03z84mLTrQQ+m1L333mtua7Uf/FjvfmS2X/pvbQq/Hh0Rr8/XA5jg96W3/acU5hbdn+B90VYubanwp+NbdJ3/+Bb9jN54442Ax+kIfP1cX3rppUy7dHT2AeAmVPaW0UFm+gdfp2dp06v222sTsQ7k0mlX2pSfU7SfVKc2aWhqVaR/DFesWJGhHzozGkDabK/NzzptTv+A6h9Ynecc3Bqhf2g1qPXkNVqZ6mN0upM2g+sfaa28talZH6cDprRK1cpO55lrMOprtGjRwgxQ03U6hkHHOGRlEKDSJmCt6nU7DRo0MNW2dpVola3zyL3T0oLHPmRGK0PvVDLtFtDBYR999JHpV74arbR1/IXSJml/evCh3SF64KPvSwci6r7qVDPdT+9rateIDnbT/fbO+9euCf3uaDWv3x39/encdA0/fc5f/vKXLI3R0Ofp70an9Onnqycg0oMLfU+6L48++qjZbm7S74SOqdDvvw4y1O+EHizpuQ386XdPu0X0PAnaXaJjO/Rx3oGM3mpfuwD++Mc/mgMvnb6o29XfnX5WesCtn5e2VgGuEe7pAAi0cuVKz+DBg81UoeLFi3uioqI8NWrU8IwcOdJz8uTJLE2985/y5D+1SqeT+dPn6lQ3f/qY3r17e4oWLWqmqD322GOeffv2ZWnq3fLlyz3169f3FC5c2FOtWjXPtGnTPPPmzTOP02lSXidOnPB07drVTB/T+/yn4Z09e9ZMUdP3rO+9bNmynubNm3teeumlgOmH3333nad///6emJgYT2xsrPn3Z599lqWpd17Hjx/3PPnkk57atWubKWA6jUunCQ4YMCBgyty1PkP1zTffeHr27OkpWbKk2ZcHHnjAc+zYsQzTx7zS09PNZ6uPDZ46d+rUKc/w4cPN719/N/oYnWL37rvvZtiOft762ei+6+fQtGlTM+XP68CBA54OHTqY75F+jkOHDvXs2bMnS79L9Ze//MXTsmVLsx+66D7pvh08eDCkqXfB3zWlv3udihlMv9v6HfGfevfEE094KlasaN5vixYtPFu2bDHPD57G+e9//9s8Vx930003mefpe9F92rp1a8Bj9TvTq1cvT5kyZczvX1+3T58+nrVr117zPQJ5TT79T7gPOIBIol0QehIYbVkI7oNGztBuFe220YGRWsEDkYY+eyCX6Sh77RN26syFCBR8OmDts9ez7elUQoIekYo+eyCX6HnY9TwC2k+vU+j0hENwng4w1PEWOoNBx3HoYMjPP//c9N0DkYqwB3KJDkrU4NEQut5FhRA6HZGvg+803HWWhg501BMeZTbFEYgU9NkDAOBy9NkDAOByhD0AAC6X6332ek7qY8eOmZN0XO20qQAAO2nPr151UaePeq9EmBN0FoWeVCy79GRfhYOuDhmJcj3sNeiDr74GAMhb9GyTesXCnAp6vTbDiRMnsr0tvVrkkSNHIj7wcz3staJXO3bs4KpS19GvX79w70KeoKd0xfV5r6+Aa7vaRYzw//SUzHrKZO/f8pygFb0GvV6mWU9dHKrU1FQzDfPChQuEfW6/oLfpXoM+J78sbnC1S38iUE42JboJB9dZU7Ro0XDvQp6QG92wGvTZCXv8F38lAQDWjg/I7nIjkpKSzMWltBDVC3TpRaCCL53dpk0bc6DjvwwbNizgMdoi0bVrV3PgqNvRi3x5r9oZLpxUBwBgpVACO/j5N2Ljxo0yfPhwE/gazr/5zW/MFT0PHDhgLs3tNXToUHMVxsxag/REThr0OlZAr1iqV/3UU2PrVTWnTp0q4ULYAwCslNthv2rVqoDbeqZLrcx37txpLmXtH+4a5pnRS1zrwcHHH38s5cuXN2fM1FNkjxs3TiZNmmRmB4QDzfgAAFdLTU0NWNLT07P0PL22gipdunTAej0Vc9myZaVu3bqSmJhoBi16bdmyRerVq2eC3v8Uzvq6+/fvl3ChsgcAuLqyjwua7j1x4kRTZV/vnDCjRo2SFi1amFD3evjhh6Vq1armPAN6YSut2LVf//333zf36ywC/6BX3ttOTCUMFWEPAHB12CcnJweM6o+Ojr7uc7Xvft++fbJ58+aA9Trt0Esr+IoVK0r79u3l8OHDcuutt4qtaMYHALhazM9T+LzL9cJ+xIgRsmLFClm/fv11TxzUrFkz8/PQoUPmp/blnzx5MuAx3ttX6+fPDYQ9AMBKuT31zuPxmKBfunSprFu3zpzF73p2795tfmqFr+Lj42Xv3r2SkpLie8yaNWvMQYZebjlcaMYHAFgpt0fjDx8+XBYuXCgffPCBmWvv7WOPjY2VIkWKmKZ6vb9Lly5SpkwZ02c/evRoM1K/fv365rE6VU9DvX///jJ9+nSzjaefftpsOyvdBzmFyh4AABGZPXu2GYGvJ87RSt27LF682Nyv0+Z0Sp0Ges2aNeWJJ56Q3r17y4cffhhw5lPtAtCfWuU/8sgjZp69/7z8cKCyBwBYKbcre891Hq+j+vXEO9ejo/VtuxYFYQ8AsFJuh72b0YwPAIDLUdkDAKxEZe8cwh4AYCXC3jmEPQDASoS9c+izBwDA5ajsAQBWorJ3DmEPALASYe8cmvEBAHA5KnsAgJWo7J1D2AMArETYO4dmfAAAXI7KHgBgJSp75xD2AABrEdjOoBkfAACXo7IHAFiJZnznEPYAACsR9s4h7AEAViLsnUOfPQAALhdS2M+cOVOqVasmhQsXlmbNmsm2bduc3zMAQETzVvbZWRBi2C9evFjGjBkjEydOlF27dkmDBg2kU6dOkpKScqObAgDgqgj7MIb9yy+/LEOHDpVBgwZJ7dq1Zc6cOVK0aFGZN2+eg7sFAADCEvYXLlyQnTt3SocOHf67gfz5ze0tW7Zk+pz09HRJTU0NWAAAuB4q+zCF/alTp+Ty5ctSvnz5gPV6+8SJE5k+JykpSWJjY31LXFxc9vYYABARCPs8NBo/MTFRzpw541uSk5Nz+iUBAECo8+zLli0rBQoUkJMnTwas19sVKlTI9DnR0dFmAQDgRjDPPkyVfVRUlDRq1EjWrl3rW3flyhVzOz4+3sHdAgBEOprxw3gGPZ12l5CQII0bN5amTZvKjBkz5Ny5c2Z0PgAAcEHYP/jgg/Ltt9/KhAkTzKC8hg0byqpVqzIM2gMAIDtoxg/zufFHjBhhFgAAcgph7xwuhAMAsBJh7xwuhAMAgMtR2QMArERl7xzCHgBgJcLeOTTjAwDgclT2AAArUdk7h7AHAFiJsHcOzfgAALgclT0AwEpU9s4h7AEA1iKwnUEzPgAALkdlDwCwEs34ziHsAQBWIuydQ9gDAKxE2DuHPnsAAFyOyh4AYCUqe+cQ9gAAKxH2zqEZHwAAl6OyBwBYicreOYQ9AMBKhL1zaMYHAMDlqOwBAFaisncOYQ8AsBJh7xya8QEAcDkqewCAlajsnUPYAwCsRNg7h7AHAFiJsHcOffYAALgclT0AwEpU9i4I+71790rRokXD9fJ5wubNm8O9C3lCUlJSuHchTxg9enS4dyFPWL58ebh3wWqpqam59lqEvXNoxgcAwOVoxgcAWInK3jlU9gAAq8M+O8uNdgk2adJESpQoIeXKlZMePXrIwYMHAx5z/vx5GT58uJQpU0aKFy8uvXv3lpMnTwY85ujRo9K1a1fTVa3befLJJ+XSpUsSToQ9AAAisnHjRhPkW7dulTVr1sjFixfl3nvvlXPnzgWMffnwww/lvffeM48/duyY9OrVy3f/5cuXTdBfuHBB/vGPf8hbb70lCxYskAkTJkg40YwPAHB1M35q0KDC6OhoswRbtWpVwG0Naa3Md+7cKa1atZIzZ87Im2++KQsXLpR27dqZx8yfP19q1aplDhDuvvtu+eijj+TAgQPy8ccfS/ny5aVhw4by3HPPybhx42TSpEkSFRUl4UBlDwCwlhNN+HFxcRIbG+tbsjqDR8NdlS5d2vzU0Ndqv0OHDr7H1KxZU6pUqSJbtmwxt/VnvXr1TNB7derUyRxw7N+/X8KFyh4A4GrJyckSExPju51ZVR/sypUrMmrUKGnRooXUrVvXrDtx4oSpzEuWLBnwWA12vc/7GP+g997vvS9cCHsAgKub8WNiYgLCPiu0737fvn2uOd8JzfgAACvl9mh8rxEjRsiKFStk/fr1UrlyZd/6ChUqmIF3p0+fFn86Gl/v8z4meHS+97b3MeFA2AMArJTbYe/xeEzQL126VNatWyfVq1cPuL9Ro0ZSqFAhWbt2rW+dTs3TqXbx8fHmtv7UM8SmpKT4HqMj+7VloXbt2hIuNOMDACD/33SvI+0/+OADM9fe28eug/qKFClifg4ZMkTGjBljBu1pgI8cOdIEvI7EVzpVT0O9f//+Mn36dLONp59+2mw7K2MFcgphDwCwUm6fQW/27NnmZ5s2bQLW6/S6gQMHmn+/8sorkj9/fnMynfT0dDPSftasWb7HFihQwHQB/PKXvzQHAcWKFZOEhASZPHmyhBNhDwCwUm6HvScLjy9cuLDMnDnTLFdTtWpV+dvf/iY2oc8eAACXo7IHAFiJC+E4h7AHAFiJsHcOzfgAALgclT0AwEpU9s4h7AEAViLsnUMzPgAALkdlDwCwEpW9cwh7AICVCHvnEPYAACsR9s6hzx4AAJejsgcAWInK3jmEPQDASoS9c2jGBwDA5ajsAQBWorJ3DmEPALASYe8cmvEBAHA5KnsAgJWo7J1D2AMArEVgO4NmfAAAXO6Gw37Tpk3SrVs3qVSpkuTLl0+WLVuWM3sGAIho3mb87CwIMezPnTsnDRo0kJkzZ97oUwEAyDLCPox99p07dzYLAAA5iQF6eWiAXnp6ulm8UlNTc/olAQBAbg7QS0pKktjYWN8SFxeX0y8JAHABmvHzUNgnJibKmTNnfEtycnJOvyQAwAUI+zzUjB8dHW0WAAAQHpxUBwBgJQbohTHs09LS5NChQ77bR44ckd27d0vp0qWlSpUqDu4aACCSEfZhDPsdO3ZI27ZtfbfHjBljfiYkJMiCBQsc3DUAABCWsG/Tpg1HSwCAHEdl7xz67AEAViLsncOFcAAAcDkqewCAlajsnUPYAwCsRNg7h7AHAFiJsHcOffYAALgclT0AwEpU9s4h7AEAViLsnUMzPgAALkdlDwCwEpW9cwh7AICVCHvn0IwPAIDLUdkDAKxEZe8cwh4AYCXC3jk04wMA4HJU9gAAa1GdO4OwBwBYiWZ85xD2AAArEfbOoc8eAACXo7IHAFiJyt45VPYAAKvDPjtLXrN+/foc2S5hDwCAJe677z659dZbZcqUKZKcnOzYdgl7AICVIrGy/89//iMjRoyQJUuWyC233CKdOnWSd999Vy5cuJCt7RL2AAArRWLYly1bVkaPHi27d++WTz/9VG6//Xb51a9+JZUqVZJf//rXsmfPnpC2S9gDAGChu+66SxITE02ln5aWJvPmzZNGjRrJPffcI/v377+hbRH2AAArRWJlry5evGia8bt06SJVq1aV1atXy+uvvy4nT56UQ4cOmXUPPPCA3Aim3gEArBSJU+9Gjhwp77zzjtn3/v37y/Tp06Vu3bq++4sVKyYvvfSSada/EYQ9AMBKkRj2Bw4ckNdee0169eol0dHRV+3Xv9EpejTjAwBgiYkTJ5om+uCgv3TpkmzatMn8u2DBgtK6deu8UdmPGTNG8ufnWONanJxj6Wbal4Xr+/Of/xzuXcgT+vTpE+5dsL4/ObdEYmXftm1bOX78uJQrVy5g/ZkzZ8x9ly9fDmm7pC0AwErhGKC3adMm6datm+kTz5cvnyxbtizg/oEDB5r1/oueCMff999/L/369ZOYmBgpWbKkDBkyxIymz+p71m0G++6770x/fajoswcA4Gfnzp2TBg0ayODBg02/eWY03OfPn++7HdzkrkGv1fmaNWtMS8igQYPk0UcflYULF8rVeF9Lg14PKPy3qdX8P//5T2nevLmEirAHAFgpHM34nTt3Nsu1aBBXqFAh0/v+9a9/yapVq2T79u3SuHFjs04H3Ok0umuNoo+NjfXtc4kSJaRIkSK++6KiouTuu++WoUOHSqgIewCAq8M+NTU1Q1hfbaR7VmzYsMH0qZcqVUratWtnzmNfpkwZc9+WLVtM07036FWHDh3MGDU9I17Pnj0z3aa3paBatWoyduzYbDXZZ4Y+ewCAq8XFxZnK2bskJSWFvC1twv/Tn/4ka9eulWnTpsnGjRtNS4B34NyJEycyDK7T0fOlS5c292VlNL7TQW/2wfEtAgBgUWWfnJxsBst5Zaeqf+ihh3z/rlevntSvX99cpU6r/fbt24d8Wlw9eNCWgjvvvDPTAXpeu3btCuk1CHsAgKvDPiYmJiDsnaRXptOT3OhpbDXstS8/JSUlwxx5HaF/tX7+7t27+w5AevTokSP7SdgDABCib775xkyLq1ixorkdHx8vp0+flp07d5qL1qh169bJlStXpFmzZldtus/s304i7AEAVgrHaPy0tDRTpXsdOXLEXG5W+9x1efbZZ6V3796mSj98+LA89dRTUqNGDXPdeVWrVi3Tr68j5+fMmWOm3ulV67T5Pyvns9cuB23Gr1y5srm9bds2M2Wvdu3aZvpeqBigBwCwUjhOqrNjxw7Tb66L92yv+u8JEyZIgQIFzHz3+++/31xnXk+Wo9X73//+94BxAG+//bbUrFnTNOvrlLuWLVvKH/7whyy9/sMPP+w7770O6NOR/Br4v/3tb2Xy5MkSKip7AIC1cvuUt23atLnma+rlZq9HWwCudQKda9m3b580bdrU/Pvdd981gwA/+eQT+eijj2TYsGHmoCMUVPYAAFhCm/29rQQff/yxaUVQ2lKgZ+ULFWEPALBSOJrxw61OnTqmr1+7BvR0u97z7h87dsx34p5QEPYAACtFYthPmzZN5s6da7oT+vbta87Tr5YvX+5r3g8FffYAAFhCQ/7UqVPmFL96kh0vHYlftGjRkLdL2AMArBSJ17NXOurfP+i958zPDprxAQBWisRm/JMnT0r//v3NnHw9p74Gv/8SKip7AAAsodeyP3r0qDzzzDPmrHzXOk/+jSDsAQBWisRm/M2bN5uR+A0bNnR0u4Q9AMBKkRj2cXFxObLf9NkDAGCJGTNmyPjx4+Wrr75ydLtU9gAAK0ViZf/ggw/Kjz/+KLfeequZaleoUKGA+/VSuaEg7AEAVorEsJ8xY0aObJewBwBYKRLDPiEhIUe2S589AAAWOXz4sDz99NPmdLkpKSlm3cqVK2X//v0hb5OwBwBYKRJPqrNx40ZzWdtPP/1U3n//fUlLSzPr9+zZIxMnTgx5u4Q9AMBKkRj248ePlylTppgr3kVFRfnWt2vXTrZu3Rrydgl7AAAssXfvXunZs2eG9eXKlTMXyAkVYQ8AsFIkVvYlS5aU48ePZ1j/2Wefyc033xzydgl7AICVIjHsH3roIRk3bpycOHHCnBf/ypUr8sknn8jYsWNlwIABIW+XsAcAwBJTp06VmjVrmtPm6uC82rVrS6tWraR58+ZmhH6omGcPALBSJM6zj4qKkjfeeEMmTJhg+u818O+880657bbbsrVdKnsAgJUisRl/8uTJ5nS5Wtl36dJF+vTpY4L+p59+MvflStgnJSVJkyZNpESJEmZkYI8ePeTgwYMhvzgAAPivZ5991je33p8eAOh9uRL2Otl/+PDhZq6fzgG8ePGi3HvvvXLu3LmQdwAAgMxEYmXv8XjMwLxgelKd0qVL506f/apVqwJuL1iwwFT4O3fuNAMIMpOenm4Wr9TU1FD3FQAQQSKpz75UqVIm5HW5/fbbAwL/8uXLptofNmxYeAbonTlzxvy81tGGNv1np+kBABC58lJgZ/dqd/peBw8ebDIzNjY2YNBetWrVJD4+PvfDXuf+jRo1Slq0aCF169a96uMSExNlzJgxAZW9DjwAAACBV7urXr26mWYXfB377Ao57LXvft++fbJ58+ZrPi46OtosAADciEhqxvdq3bq1Kaa/+OILc8U7/be/q3WZ50jYjxgxQlasWCGbNm2SypUrh/TCAABcSySG/datW+Xhhx+Wr7/+OsP+az++9t/neNjrC48cOVKWLl0qGzZsMM0NAADAGToIr3HjxvLXv/5VKlasmOnI/BwPe226X7hwoXzwwQdmrr2eu1fpQIIiRYo4skMAAERqZf/ll1/KkiVLpEaNGo5u94bm2c+ePduMwG/Tpo054vAuixcvdnSnAACIxHn2zZo1k0OHDjm+3RtuxgcAADlDu8qfeOIJ03Jer169DKPy69evH9J2uRAOAMBKkdiM37t3b/NT59t7ab+998x6uTJADwCA3BKJYX/kyJEc2S5hDwCAJapWrZoj2yXsAQBWiqTKfvny5Vl63P333x/S9gl7AICVIinse/Tocd3H0GcPAHCdSAr7K0GnxXXaDc2zBwAAeQ+VPQDASpFU2ec0wh4AYCXC3jk04wMA4HJU9gAAK1HZO4ewBwBYibB3DmEPAEAYlSpVKsvXrf/+++9Deg3CHgBgpUip7GfMmJHjr0HYAwCsFClhn5CQkOOvwWh8AAAscvjwYXn66aelb9++kpKSYtatXLlS9u/fH/I2CXsAgNWVfXaWvGbjxo1Sr149+fTTT+X999+XtLQ0s37Pnj0yceLEkLdL2AMArBSJYT9+/HiZMmWKrFmzRqKionzr27VrJ1u3bg15u/TZAwCslRcDOzv27t0rCxcuzLC+XLlycurUqZC3S2UPAIAlSpYsKcePH8+w/rPPPpObb7455O0S9gAAK0ViM/5DDz0k48aNkxMnTpi593rp208++UTGjh0rAwYMCHm7hD0AwEqRGPZTp06VmjVrSlxcnBmcV7t2bWnVqpU0b97cjNAPFX32AABYQgflvfHGGzJhwgTTf6+Bf+edd8ptt92Wre0S9gAAK0XKSXX8rV+/Xtq2bWsqe138zZ07Vx577DEJBc34AAArRWIz/n333SdPPvmkXLx40bdOR+F369bNTMsLFWEPAIBFlf3SpUulSZMmcuDAAfnrX/8qdevWldTUVNm9e3fI2yXsAQBWisTKvnnz5ibUNeDvuusu6dmzp4wePVo2bNggVatWDXm7hD0AwEqRGPbqiy++kB07dkjlypWlYMGCcvDgQfnxxx8lOwh7AAB+tmnTJtM/XqlSJTPPfdmyZeJPDyB0pHzFihWlSJEi0qFDB/nyyy8zXHO+X79+EhMTY06SM2TIEN857q/nhRdekPj4eOnYsaPs27dPtm3bZk6oU79+fdmyZYvkudH4P/zwg/kgcXV6ZIfry07TViRZsGBBuHchT1i8eHG4d8Fq2ndcvnx5147GP3funDRo0EAGDx4svXr1ynD/9OnT5fe//7289dZbUr16dXnmmWekU6dOpn+9cOHC5jEa9HoWPD2/vQ60GzRokDz66KOZngY32KuvvmoOMDp37mxua3O+Bv5vfvMbadOmjaSnp0somHoHALBSOMK+c+fOvqDNbHszZswwJ7fp3r27WfenP/3JHPxoQOvZ7/71r3/JqlWrZPv27dK4cWPzmNdee026dOkiL730kmkxuBadW1+2bNmAdYUKFZIXX3xRfvGLX0ioaMYHALi6zz41NTVgCbU6PnLkiDmNrTbde8XGxkqzZs18Tez6U5vuvUGv9PH58+c3l629nuCg99e6dWsJFZU9AMDV4oJOTqPXhZ80adINb0eDXgV3Y+ht7336U69Q508H2ZUuXdr3mGDaXaDdbNrHn1nXgT+9xn0oCHsAgKub8ZOTk02QekVHR4tNtHXAO4ZN9zMnxrMR9gAAV4d9TExMQNiHqkKFCubnyZMnzWh8L73dsGFD32NSUlICnnfp0iUzQt/7/GDz58/P8YG09NkDAJAFOvpeA3vt2rW+dToGQPvidbqc0p+nT5+WnTt3+h6zbt06c6la7du/Gr1/2rRp0qJFC3P2PD017k8//SROobIHAFgpHKPx09LS5NChQwGD8vSMdtrnXqVKFRk1apRMmTLFXIXOO/VOR9j36NHDPL5WrVrm/PZDhw6VOXPmmKl3I0aMMCP1rzUS//nnnzfjCHQwn87f1yl42kIwb948cQJhDwCwUjjCfseOHeaqc15jxowxPxMSEkwT+1NPPWXm4uu8ea3gW7ZsaabaeefYq7ffftsEfPv27c0o/N69e5u5+deiU/hmzZrlu6rdxx9/LF27dpU//vGPZhvZRdgDAPAzPXHNtQ4SdPDc5MmTzXI12gqQlRPo+Dt69KiZi++lFb6+1rFjx8xpc7OLsAcAWCmSrmd/6dKlgNYB78l0/C91mx2EPQDASpEU9h6PRwYOHBgwLfD8+fMybNgwKVasmG8d8+wBAMijEhISMqx75JFHHNs+YQ8AsFIkVfbz/eba5wTCHgBgpUgK+5xG2AMArEVgO4Mz6AEA4HJU9gAAK9GM7xzCHgBgJcLeOTTjAwDgclT2AAArUdk7h7AHAFiJsHcOzfgAALgclT0AwEpU9s4h7AEAViLsnUMzPgAALkdlDwCwEpW9cwh7AICVCHvnEPYAACsR9s6hzx4AAJejsgcAWInK3jmEPQDASoS9c2jGBwDA5ajsAQBWorIPU2U/e/ZsqV+/vsTExJglPj5eVq5c6eDuAAAQGPbZWRBC2FeuXFleeOEF2blzp+zYsUPatWsn3bt3l/3799/IZgAAgK3N+N26dQu4/fzzz5tqf+vWrVKnTp1Mn5Oenm4Wr9TU1FD3FQAQQWjGt2CA3uXLl2XRokVy7tw505x/NUlJSRIbG+tb4uLiQn1JAEAEoRk/jGG/d+9eKV68uERHR8uwYcNk6dKlUrt27as+PjExUc6cOeNbkpOTs7vPAAAgJ0fj33HHHbJ7924T3EuWLJGEhATZuHHjVQNfDwp0AQDgRtCMH8awj4qKkho1aph/N2rUSLZv3y6vvvqqzJ0718HdAgBEOsLeonn2V65cCRiABwCAEwj7MIW99r937txZqlSpImfPnpWFCxfKhg0bZPXq1Q7uEgAACFvYp6SkyIABA+T48eNmZL2eYEeDvmPHjo7uFAAAiuo8DGH/5ptvOvSyAABcG834zuFCOAAAuBwXwgEAWInK3jmEPQDASoS9c2jGBwDA5ajsAQBWorJ3DmEPALASYe8cmvEBAHA5KnsAgJWo7J1D2AMArETYO4ewBwBYibB3Dn32AAC4HJU9AMBKVPbOIewBAFYi7J1DMz4AAC5HZQ8AsBKVvXMIewCAlQh759CMDwCAy1HZAwCsRGXvHMIeAGAlwt45NOMDAOByVPYAACtR2TuHsAcAWImwdw5hDwCwEmHvHPrsAQBwOSp7AIC1qM6dQdgDAKxEM75zaMYHAMDlCHsAgNWVfXaWGzFp0iTJly9fwFKzZk3f/efPn5fhw4dLmTJlpHjx4tK7d285efKk5AWEPQDASrkd9qpOnTpy/Phx37J582bxGj16tHz44Yfy3nvvycaNG+XYsWPSq1cvyQvC1mf/yCOPSHR0dLhePk9YuHBhuHchTzh48GC4dyFP+P3vfx/uXcgT+vTpE+5dsNrFixfFzQoWLCgVKlTIsP7MmTPy5ptvmr/L7dq1M+vmz58vtWrVkq1bt8rdd98tNqOyBwC4urJPTU0NWNLT06/6ml9++aVUqlRJbrnlFunXr58cPXrUrN+5c6c50OnQoYPvsdrEX6VKFdmyZYvYjrAHALg67OPi4iQ2Nta3JCUlZfp6zZo1kwULFsiqVatk9uzZcuTIEbnnnnvk7NmzcuLECYmKipKSJUsGPKd8+fLmPtsx9Q4A4GrJyckSExPju321LuTOnTv7/l2/fn0T/lWrVpV3331XihQpInkZlT0AwNWVfUxMTMCS1fFiWsXffvvtcujQIdOPf+HCBTl9+nTAY3Q0fmZ9/LYh7AEAVgrHaHx/aWlpcvjwYalYsaI0atRIChUqJGvXrg0YHKx9+vHx8WI7mvEBAFbK7TPojR07Vrp162aa7nVa3cSJE6VAgQLSt29f09c/ZMgQGTNmjJQuXdq0EIwcOdIEve0j8RVhDwCAiHzzzTcm2L/77ju56aabpGXLlmZanf5bvfLKK5I/f35zMh0d0d+pUyeZNWuW5AWEPQDASrld2S9atOia9xcuXFhmzpxplryGsAcAWIkL4TiHAXoAALgclT0AwEpU9s4h7AEAViLsnUMzPgAALkdlDwCwEpW9cwh7AICVCHvn0IwPAIDLUdkDAKxEZe8cwh4AYCXC3jmEPQDASoS9c+izBwDA5ajsAQDWojp3BmEPALASzfjOoRkfAACXo7IHAFiJyt45hD0AwEqEvXNoxgcAwOWo7AEAVqKydw5hDwCwEmHvHJrxAQBwOSp7AICVqOydQ9gDAKxE2DuHsAcAWImwt6TP/oUXXpB8+fLJqFGjnNsjAABgR2W/fft2mTt3rtSvX9/ZPQIAgMo+/JV9Wlqa9OvXT9544w0pVaqUs3sEAIBf2GdnQTbCfvjw4dK1a1fp0KHDdR+bnp4uqampAQsAALC4GX/RokWya9cu04yfFUlJSfLss8+Gsm8AgAhGM36YKvvk5GR5/PHH5e2335bChQtn6TmJiYly5swZ36LbAADgemjGD1Nlv3PnTklJSZG77rrLt+7y5cuyadMmef31102TfYECBQKeEx0dbRYAAJAHwr59+/ayd+/egHWDBg2SmjVryrhx4zIEPQAAoaIZP0xhX6JECalbt27AumLFikmZMmUyrAcAIDsIe+dwIRwAAFwu26fL3bBhgzN7AgCAHyp753BufACAlQh75xD2AAArEfbOoc8eAACXo7IHAFiL6twZhD0AwJVBz4HCf9GMDwCAy1HZAwCsRGXvHMIeAGAlwt45NOMDAOByVPYAACtR2TuHsAcAWImwdw7N+AAAuByVPQDASlT2ziHsAQBWIuydQ9gDAKxE2DuHPnsAAFyOyh4AYCUqe+cQ9gAAKxH2zqEZHwAAl6OyBwBYicreOYQ9AMBKhL1zaMYHAMDlqOwBAFaisncOYQ8AsBJh7xya8QEAcDkqewCAlajsnUNlDwCwkoZ1dpdQzJw5U6pVqyaFCxeWZs2aybZt2ySvI+wBAFYKR9gvXrxYxowZIxMnTpRdu3ZJgwYNpFOnTpKSkiJ5GWEPAMDPXn75ZRk6dKgMGjRIateuLXPmzJGiRYvKvHnzJC/L9T5775HWhQsXcvul85wrV66EexfyhIsXL4Z7F/KEs2fPhnsX8gS+T9d26dKlXO0Pd+J1UlNTA25HR0ebJZjm0s6dOyUxMdG3Ln/+/NKhQwfZsmWL5GUFw/UHJ68fJQF5zapVq8K9C3AR/VseGxubI9uOioqSChUqyIkTJ7K9reLFi0tcXFzAOm2inzRpUobHnjp1Si5fvizly5cPWK+3P//8c8nLcj3sK1WqJMnJyVKiRAnJly+f2ECP+vTLoPsVExMT7t2xEp9R1vA5ZQ2fU979nLTS1qDXv+U5RQfGHTlyxJEWYN3ffEFZk1lV73a5HvbaJFK5cmWxkf7PZMv/ULbiM8oaPqes4XPKm59TTlX0wYGvS24qW7asFChQQE6ePBmwXm9rS0NexgA9AADk/7sPGjVqJGvXrg0YO6W34+PjJS/jpDoAAPxMp90lJCRI48aNpWnTpjJjxgw5d+6cGZ2flxH2P/ff6ICNSOzHySo+o6zhc8oaPqes4XPKfQ8++KB8++23MmHCBDNAsGHDhmZwa/Cgvbwmn4fzCQIA4Gr02QMA4HKEPQAALkfYAwDgcoQ9AAAuR9gDAOByER/2brxusdM2bdok3bp1M6fH1NNOLlu2LNy7ZJ2kpCRp0qSJOQ10uXLlpEePHnLw4MFw75Z1Zs+eLfXr1/edEU5PVLJy5cpw75b1XnjhBfP/3qhRo8K9K8ijIjrs3XrdYqfpCSX0s9EDI2Ru48aNMnz4cNm6dausWbPGXDnt3nvvNZ8d/ktPla3BpVcW27Fjh7Rr1066d+8u+/fvD/euWWv79u0yd+5cc5AEhCqi59lrJa/V2Ouvv+47LaJedGLkyJEyfvz4cO+elbS6WLp0qalccXV6Ug6t8PUgoFWrVuHeHauVLl1aXnzxRRkyZEi4d8U6aWlpctddd8msWbNkypQp5gQvekY34EZFbGXvvW6xXqfYbdctRvidOXPGF2TInF5KdNGiRab1I6+fdzynaGtR165dA/5OAaGI2NPluvm6xQgvbSHSvtUWLVpI3bp1w7071tm7d68J9/Pnz5trjWtLUe3atcO9W9bRAyHtXtRmfCC7IjbsgZysxvbt2yebN28O965Y6Y477pDdu3eb1o8lS5aYi45odweB/196/frHH3/cjP/I7cu8wp0iNuzdfN1ihM+IESNkxYoVZgaDDkZD5pcRrVGjhvm3Xk5UK9dXX33VDELD/9MuRh0orP31XtoSqd8rHWOUnp5u/n4BWRWxffZuvm4xcp+Oc9Wg1ybpdevWSfXq1cO9S3mG/n+n4YX/at++venu0BYQ76KXXO3Xr5/5N0GPGxWxlb2br1ucEyOCDx065Lt95MgR8wdHB59VqVIlrPtmU9P9woUL5YMPPjBz7fXSmCo2NlaKFCkS7t2zRmJionTu3Nl8b86ePWs+sw0bNsjq1avDvWtW0e9Q8HiPYsWKSZkyZRgHgpBEdNi79brFTtP50G3btg04SFJ6oLRgwYIw7pldJ4tRbdq0CVg/f/58GThwYJj2yj7aND1gwAA5fvy4ORDSueMa9B07dgz3rgGuFtHz7AEAiAQR22cPAECkIOwBAHA5wh4AAJcj7AEAcDnCHgAAlyPsAQBwOcIeAACXI+wBAHA5wh4AAJcj7AEAcDnCHgAAcbf/AzP18ZMH9wZiAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# 9. Simulate a grayscale image and display its pixel values using NumPy\n",
    "gray_image = np.random.randint(0, 256, size=(5, 5))  \n",
    "print(\"\\nGrayscale Image Pixel Values:\\n\", gray_image)\n",
    "\n",
    "plt.imshow(gray_image, cmap='gray', vmin=0, vmax=255)\n",
    "plt.title('Simulated Grayscale Image')\n",
    "plt.colorbar(label='Pixel Intensity')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a35861f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
